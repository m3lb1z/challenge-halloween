classDiagram
    class Monster {
        -Long id
        -String name
        -String type
        -int dangerLevel
        -String habitat
        -String description
        -String imageUrl
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
        -Set~Weakness~ weaknesses
        -Set~Power~ powers
        -List~Appearance~ appearances
        +getters()
        +setters()
    }

    class Weakness {
        -Long id
        -String name
        -Set~Monster~ monsters
        +getters()
        +setters()
    }

    class Power {
        -Long id
        -String name
        -Set~Monster~ monsters
        +getters()
        +setters()
    }

    class Appearance {
        -Long id
        -String location
        -Date date
        -int witnesses
        -Monster monster
        +getters()
        +setters()
    }

    class MonsterRepository {
        <<interface>>
        +findAll() List~Monster~
        +findById(Long id) Optional~Monster~
        +save(Monster monster) Monster
        +deleteById(Long id) void
        +existsByNameIgnoreCase(String name) boolean
        +findByType(String type) List~Monster~
        +findByDangerLevelGreaterThanEqual(int level) List~Monster~
    }

    class WeaknessRepository {
        <<interface>>
        +findAll() List~Weakness~
        +findById(Long id) Optional~Weakness~
        +findByNameIgnoreCase(String name) Optional~Weakness~
        +existsByNameIgnoreCase(String name) boolean
        +findAllByMonsterId(Long monsterId) Set~Weakness~
    }

    class PowerRepository {
        <<interface>>
        +findAll() List~Power~
        +findById(Long id) Optional~Power~
        +findByNameIgnoreCase(String name) Optional~Power~
        +existsByNameIgnoreCase(String name) boolean
        +findAllByMonsterId(Long monsterId) Set~Power~
    }

    class AppearanceRepository {
        <<interface>>
        +findAll() List~Appearance~
        +findById(Long id) Optional~Appearance~
        +findAllByMonsterId(Long monsterId) List~Appearance~
        +findByIdAndMonsterId(Long id, Long monsterId) Optional~Appearance~
        +deleteByIdAndMonsterId(Long id, Long monsterId) void
    }

    class MonsterDTO {
        -Long id
        -String name
        -String type
        -int dangerLevel
        -List~String~ weaknesses
        -List~String~ powers
        -List~AppearanceDTO~ appearances
        -String habitat
        -String description
        -String imageUrl
        -LocalDateTime createdAt
        -LocalDateTime updatedAt
    }

    class AppearanceDTO {
        -Long id
        -String location
        -Date date
        -int witnesses
    }

    class MonsterService {
        -MonsterRepository monsterRepository
        -WeaknessRepository weaknessRepository
        -PowerRepository powerRepository
        -AppearanceRepository appearanceRepository
        +getAllMonsters() List~Monster~
        +getMonsterById(Long id) Monster
        +getMonsterFullById(Long id) MonsterDTO
        +createMonster(MonsterDTO monsterDTO) Monster
        +updateMonster(Long id, MonsterDTO monsterDTO) Monster
        +deleteMonster(Long id) void
        +getMonstersByType(String type) List~Monster~
        +getDangerousMonsters(int level) List~Monster~
        +getAppearancesByMonsterId(Long monsterId) List~Appearance~
        +getAppearanceById(Long monsterId, Long id) Appearance
        +createAppearance(Long monsterId, AppearanceDTO appearanceDTO) Appearance
        +updateAppearance(Long monsterId, Long id, AppearanceDTO appearanceDTO) Appearance
        +deleteAppearance(Long monsterId, Long id) void
    }

    Monster "1" *-- "*" Appearance
    Monster "*" -- "*" Weakness
    Monster "*" -- "*" Power
    MonsterDTO -- AppearanceDTO : contains
    MonsterService -- MonsterRepository : uses >
    MonsterService -- WeaknessRepository : uses >
    MonsterService -- PowerRepository : uses >
    MonsterService -- AppearanceRepository : uses >
    MonsterRepository -- Monster : manages >
    WeaknessRepository -- Weakness : manages >
    PowerRepository -- Power : manages >
    AppearanceRepository -- Appearance : manages >